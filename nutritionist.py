import pandas as pd
import numpy as np
import joblib
import sys

from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans

# üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –º–æ–¥–µ–ª–µ–π
nutrition_df = pd.read_csv("nutrition_facts_with_clusters.csv")
scaler = joblib.load("scaler.joblib")
kmeans = joblib.load("kmeans.joblib")

# üß™ –ü–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞—Å—Ç–µ—Ä –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—É
def show_cluster(ingredient):
    ingredient_col = next((col for col in nutrition_df.columns if col.lower() == "ingredient"), None)
    cluster_col = next((col for col in nutrition_df.columns if col.lower() == "cluster"), None)

    if not ingredient_col or not cluster_col:
        print("üß≤ –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ ('Ingredient' –∏ 'Cluster')")
        return

    row = nutrition_df[nutrition_df[ingredient_col].str.lower() == ingredient.lower()]
    if row.empty:
        print(f"üß≤ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—É: {ingredient}")
        return

    cluster = row[cluster_col].values[0]
    print(f"üß¨ –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç: {ingredient.lower()}")
    print(f"–ö–ª–∞—Å—Ç–µ—Ä: {cluster}")

    top_nutrients = row.drop([ingredient_col, cluster_col], axis=1).T.sort_values(by=row.index[0], ascending=False).head(5)
    print("üîù –¢–æ–ø-5 –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤:")
    for name, val in top_nutrients.itertuples():
        print(f"- {name}: {val:.1f}% –æ—Ç –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã")

# üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –ø–æ –∫–ª–∞—Å—Ç–µ—Ä–∞–º
def list_ingredients_by_cluster():
    ingredient_col = next((col for col in nutrition_df.columns if col.lower() == "ingredient"), None)
    cluster_col = next((col for col in nutrition_df.columns if col.lower() == "cluster"), None)

    if not ingredient_col or not cluster_col:
        print("üß≤ –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ ('Ingredient' –∏ 'Cluster')")
        return

    print("üìä –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –ø–æ –∫–ª–∞—Å—Ç–µ—Ä–∞–º:")
    for cluster in sorted(nutrition_df[cluster_col].unique()):
        items = nutrition_df[nutrition_df[cluster_col] == cluster][ingredient_col].tolist()
        print(f"\nüîπ –ö–ª–∞—Å—Ç–µ—Ä {cluster} ({len(items)} –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤):")
        for item in items:
            print("-", item)

# üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ N –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –ø–æ –Ω—É—Ç—Ä–∏–µ–Ω—Ç–∞–º
def compare_multiple_ingredients(ingredients):
    ingredient_col = next((col for col in nutrition_df.columns if col.lower() == "ingredient"), None)
    cluster_col = next((col for col in nutrition_df.columns if col.lower() == "cluster"), None)

    data = []
    names = []

    for ingr in ingredients:
        row = nutrition_df[nutrition_df[ingredient_col].str.lower() == ingr.lower()]
        if row.empty:
            print(f"üß≤ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—É: {ingr}")
            continue
        names.append(ingr.lower())
        data.append(row.drop([ingredient_col, cluster_col], axis=1).values.flatten())

    if len(data) < 2:
        print("üß≤ –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
        return

    df = pd.DataFrame(data, index=names, columns=nutrition_df.columns.drop([ingredient_col, cluster_col]))
    print(f"üî¨ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤: {', '.join(names)}")

    for nut in df.columns:
        values = ", ".join([f"{ingr}: {df.loc[ingr, nut]:.1f}%" for ingr in df.index if df.loc[ingr, nut] > 0])
        if values:
            print(f"üìå {nut} ‚Üí {values}")

# üîù –¢–æ–ø-N –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –ø–æ –Ω—É—Ç—Ä–∏–µ–Ω—Ç—É
def show_top_by_nutrient(nutrient_name, top_n=10):
    nutrient_col = next((col for col in nutrition_df.columns if nutrient_name.lower() in col.lower()), None)
    ingredient_col = next((col for col in nutrition_df.columns if col.lower() == "ingredient"), None)

    if not nutrient_col or not ingredient_col:
        print("üß≤ –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ ('Ingredient' –∏–ª–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –Ω—É—Ç—Ä–∏–µ–Ω—Ç–∞)")
        return

    top = nutrition_df[[ingredient_col, nutrient_col]].sort_values(by=nutrient_col, ascending=False).head(top_n)
    print(f"üèÜ –¢–æ–ø-{top_n} –ø–æ –Ω—É—Ç—Ä–∏–µ–Ω—Ç—É: {nutrient_col}")
    for i, row in top.iterrows():
        print(f"- {row[ingredient_col]}: {row[nutrient_col]:.1f}% –æ—Ç –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã")

# üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∫–ª–∞—Å—Ç–µ—Ä–∞ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—É
def predict_cluster_by_ingredient(ingredient_name):
    ingredient_col = next((col for col in nutrition_df.columns if col.lower() == "ingredient"), None)
    cluster_col = next((col for col in nutrition_df.columns if col.lower() == "cluster"), None)

    row = nutrition_df[nutrition_df[ingredient_col].str.lower() == ingredient_name.lower()]
    if row.empty:
        print(f"üß≤ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—É: {ingredient_name}")
        return

    features = row.drop([ingredient_col, cluster_col], axis=1)
    try:
        features_scaled = scaler.transform(features)
        cluster = kmeans.predict(features_scaled)[0]
        print(f"üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Ç–µ—Ä –¥–ª—è {ingredient_name.lower()}: {cluster}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {e}")

# üßà –°–ø—Ä–∞–≤–∫–∞
HELP_TEXT = """
üë©‚Äçüî¨ Nutritionist CLI:

–ö–æ–º–∞–Ω–¥—ã:
- python3 nutritionist.py pasta                           ‚Üí –∫–ª–∞—Å—Ç–µ—Ä –∏ —Ç–æ–ø-5 –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤
- python3 nutritionist.py milk,honey,jam                  ‚Üí —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
- python3 nutritionist.py --list                          ‚Üí –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –ø–æ –∫–ª–∞—Å—Ç–µ—Ä–∞–º
- python3 nutritionist.py --top protein 5                 ‚Üí —Ç–æ–ø-5 –ø–æ –Ω—É—Ç—Ä–∏–µ–Ω—Ç—É

"""

if __name__ == "__main__":
    args = sys.argv[1:]

    if len(args) == 1 and ',' in args[0]:
        args = [arg.strip() for arg in args[0].split(',')]

    if len(args) == 1:
        if args[0] == "--list":
            list_ingredients_by_cluster()
        elif args[0] in ["--help", "-h"]:
            print(HELP_TEXT)
        elif args[0].lower().endswith(".csv"):
            print("üìÇ –†–∞–±–æ—Ç–∞ —Å CSV –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
        else:
            show_cluster(args[0])

    elif len(args) >= 2:
        if args[0] == "--top":
            try:
                show_top_by_nutrient(args[1], int(args[2]) if len(args) > 2 else 10)
            except:
                print("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è --top. –ü—Ä–∏–º–µ—Ä: --top protein 5")
        elif args[0] == "--predict":
            predict_cluster_by_ingredient(args[1])
        elif args[0] == "--predict-rating":
            try:
                from recipes import classify_ingredients
                prediction = classify_ingredients(args[1])
                print(f"üçΩ –ü—Ä–æ–≥–Ω–æ–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –±–ª—é–¥–∞: {prediction}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞: {e}")
        else:
            compare_multiple_ingredients(args)

    else:
        print("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python3 nutritionist.py [ingredient] | --list | [ingr1, ingr2, ...] | --top [nutrient] | --predict [ingredient] | --predict-rating [ingr1,ingr2,...] | --help")
